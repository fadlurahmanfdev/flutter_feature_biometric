// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon
@file:Suppress("UNCHECKED_CAST", "ArrayInDataClass")

package com.fadlurahmanfdev.flutter_feature_biometric_android

import android.util.Log
import io.flutter.plugin.common.BasicMessageChannel
import io.flutter.plugin.common.BinaryMessenger
import io.flutter.plugin.common.MessageCodec
import io.flutter.plugin.common.StandardMessageCodec
import java.io.ByteArrayOutputStream
import java.nio.ByteBuffer

private fun wrapResult(result: Any?): List<Any?> {
  return listOf(result)
}

private fun wrapError(exception: Throwable): List<Any?> {
  return if (exception is FlutterError) {
    listOf(
      exception.code,
      exception.message,
      exception.details
    )
  } else {
    listOf(
      exception.javaClass.simpleName,
      exception.toString(),
      "Cause: " + exception.cause + ", Stacktrace: " + Log.getStackTraceString(exception)
    )
  }
}

/**
 * Error class for passing custom error details to Flutter via a thrown PlatformException.
 * @property code The error code.
 * @property message The error message.
 * @property details The error details. Must be a datatype supported by the api codec.
 */
class FlutterError (
  val code: String,
  override val message: String? = null,
  val details: Any? = null
) : Throwable()

enum class NativeBiometricStatus(val raw: Int) {
  SUCCESS(0),
  NO_AVAILABLE(1),
  UNAVAILABLE(2),
  NONE_ENROLLED(3),
  UNKNOWN(4);

  companion object {
    fun ofRaw(raw: Int): NativeBiometricStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class NativeBiometricAuthenticator(val raw: Int) {
  WEAK(0),
  STRONG(1),
  DEVICE_CREDENTIAL(2);

  companion object {
    fun ofRaw(raw: Int): NativeBiometricAuthenticator? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

enum class NativeAuthResultStatus(val raw: Int) {
  SUCCESS(0),
  CANCELED(1),
  FAILED(2),
  ERROR(3),
  DIALOG_CLICKED(4);

  companion object {
    fun ofRaw(raw: Int): NativeAuthResultStatus? {
      return values().firstOrNull { it.raw == raw }
    }
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAuthDialogClickResult (
  val which: Long
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeAuthDialogClickResult {
      val which = pigeonVar_list[0] as Long
      return NativeAuthDialogClickResult(which)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      which,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAuthFailure (
  val code: String,
  val message: String? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeAuthFailure {
      val code = pigeonVar_list[0] as String
      val message = pigeonVar_list[1] as String?
      return NativeAuthFailure(code, message)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      code,
      message,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeAuthResult (
  val status: NativeAuthResultStatus,
  val failure: NativeAuthFailure? = null,
  val dialogClickResult: NativeAuthDialogClickResult? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeAuthResult {
      val status = pigeonVar_list[0] as NativeAuthResultStatus
      val failure = pigeonVar_list[1] as NativeAuthFailure?
      val dialogClickResult = pigeonVar_list[2] as NativeAuthDialogClickResult?
      return NativeAuthResult(status, failure, dialogClickResult)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      failure,
      dialogClickResult,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeSecureEncryptAuthResult (
  val status: NativeAuthResultStatus,
  val encodedIVKey: String? = null,
  val encryptedResult: Map<String, String?>? = null,
  val failure: NativeAuthFailure? = null,
  val dialogClickResult: NativeAuthDialogClickResult? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeSecureEncryptAuthResult {
      val status = pigeonVar_list[0] as NativeAuthResultStatus
      val encodedIVKey = pigeonVar_list[1] as String?
      val encryptedResult = pigeonVar_list[2] as Map<String, String?>?
      val failure = pigeonVar_list[3] as NativeAuthFailure?
      val dialogClickResult = pigeonVar_list[4] as NativeAuthDialogClickResult?
      return NativeSecureEncryptAuthResult(status, encodedIVKey, encryptedResult, failure, dialogClickResult)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      encodedIVKey,
      encryptedResult,
      failure,
      dialogClickResult,
    )
  }
}

/** Generated class from Pigeon that represents data sent in messages. */
data class NativeSecureDecryptAuthResult (
  val status: NativeAuthResultStatus,
  val decryptedResult: Map<String, String?>? = null,
  val failure: NativeAuthFailure? = null,
  val dialogClickResult: NativeAuthDialogClickResult? = null
)
 {
  companion object {
    fun fromList(pigeonVar_list: List<Any?>): NativeSecureDecryptAuthResult {
      val status = pigeonVar_list[0] as NativeAuthResultStatus
      val decryptedResult = pigeonVar_list[1] as Map<String, String?>?
      val failure = pigeonVar_list[2] as NativeAuthFailure?
      val dialogClickResult = pigeonVar_list[3] as NativeAuthDialogClickResult?
      return NativeSecureDecryptAuthResult(status, decryptedResult, failure, dialogClickResult)
    }
  }
  fun toList(): List<Any?> {
    return listOf(
      status,
      decryptedResult,
      failure,
      dialogClickResult,
    )
  }
}
private open class MessagesPigeonCodec : StandardMessageCodec() {
  override fun readValueOfType(type: Byte, buffer: ByteBuffer): Any? {
    return when (type) {
      129.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NativeBiometricStatus.ofRaw(it.toInt())
        }
      }
      130.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NativeBiometricAuthenticator.ofRaw(it.toInt())
        }
      }
      131.toByte() -> {
        return (readValue(buffer) as Long?)?.let {
          NativeAuthResultStatus.ofRaw(it.toInt())
        }
      }
      132.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAuthDialogClickResult.fromList(it)
        }
      }
      133.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAuthFailure.fromList(it)
        }
      }
      134.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeAuthResult.fromList(it)
        }
      }
      135.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeSecureEncryptAuthResult.fromList(it)
        }
      }
      136.toByte() -> {
        return (readValue(buffer) as? List<Any?>)?.let {
          NativeSecureDecryptAuthResult.fromList(it)
        }
      }
      else -> super.readValueOfType(type, buffer)
    }
  }
  override fun writeValue(stream: ByteArrayOutputStream, value: Any?)   {
    when (value) {
      is NativeBiometricStatus -> {
        stream.write(129)
        writeValue(stream, value.raw)
      }
      is NativeBiometricAuthenticator -> {
        stream.write(130)
        writeValue(stream, value.raw)
      }
      is NativeAuthResultStatus -> {
        stream.write(131)
        writeValue(stream, value.raw)
      }
      is NativeAuthDialogClickResult -> {
        stream.write(132)
        writeValue(stream, value.toList())
      }
      is NativeAuthFailure -> {
        stream.write(133)
        writeValue(stream, value.toList())
      }
      is NativeAuthResult -> {
        stream.write(134)
        writeValue(stream, value.toList())
      }
      is NativeSecureEncryptAuthResult -> {
        stream.write(135)
        writeValue(stream, value.toList())
      }
      is NativeSecureDecryptAuthResult -> {
        stream.write(136)
        writeValue(stream, value.toList())
      }
      else -> super.writeValue(stream, value)
    }
  }
}


/** Generated interface from Pigeon that represents a handler of messages from Flutter. */
interface FlutterFeatureBiometricApi {
  fun isDeviceSupportBiometric(): Boolean
  fun checkAuthenticationStatus(authenticator: NativeBiometricAuthenticator): NativeBiometricStatus
  fun canAuthenticate(authenticator: NativeBiometricAuthenticator): Boolean
  fun authenticate(authenticator: NativeBiometricAuthenticator, title: String, description: String, negativeText: String, callback: (Result<NativeAuthResult>) -> Unit)
  fun secureEncryptAuthenticate(alias: String, requestForEncrypt: Map<String, String>, title: String, description: String, negativeText: String, callback: (Result<NativeSecureEncryptAuthResult>) -> Unit)
  fun secureDecryptAuthenticate(alias: String, encodedIVKey: String, requestForDecrypt: Map<String, String>, title: String, description: String, negativeText: String, callback: (Result<NativeSecureDecryptAuthResult>) -> Unit)

  companion object {
    /** The codec used by FlutterFeatureBiometricApi. */
    val codec: MessageCodec<Any?> by lazy {
      MessagesPigeonCodec()
    }
    /** Sets up an instance of `FlutterFeatureBiometricApi` to handle messages through the `binaryMessenger`. */
    @JvmOverloads
    fun setUp(binaryMessenger: BinaryMessenger, api: FlutterFeatureBiometricApi?, messageChannelSuffix: String = "") {
      val separatedMessageChannelSuffix = if (messageChannelSuffix.isNotEmpty()) ".$messageChannelSuffix" else ""
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_feature_biometric_android.FlutterFeatureBiometricApi.isDeviceSupportBiometric$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { _, reply ->
            val wrapped: List<Any?> = try {
              listOf(api.isDeviceSupportBiometric())
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_feature_biometric_android.FlutterFeatureBiometricApi.checkAuthenticationStatus$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authenticatorArg = args[0] as NativeBiometricAuthenticator
            val wrapped: List<Any?> = try {
              listOf(api.checkAuthenticationStatus(authenticatorArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_feature_biometric_android.FlutterFeatureBiometricApi.canAuthenticate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authenticatorArg = args[0] as NativeBiometricAuthenticator
            val wrapped: List<Any?> = try {
              listOf(api.canAuthenticate(authenticatorArg))
            } catch (exception: Throwable) {
              wrapError(exception)
            }
            reply.reply(wrapped)
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_feature_biometric_android.FlutterFeatureBiometricApi.authenticate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val authenticatorArg = args[0] as NativeBiometricAuthenticator
            val titleArg = args[1] as String
            val descriptionArg = args[2] as String
            val negativeTextArg = args[3] as String
            api.authenticate(authenticatorArg, titleArg, descriptionArg, negativeTextArg) { result: Result<NativeAuthResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_feature_biometric_android.FlutterFeatureBiometricApi.secureEncryptAuthenticate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aliasArg = args[0] as String
            val requestForEncryptArg = args[1] as Map<String, String>
            val titleArg = args[2] as String
            val descriptionArg = args[3] as String
            val negativeTextArg = args[4] as String
            api.secureEncryptAuthenticate(aliasArg, requestForEncryptArg, titleArg, descriptionArg, negativeTextArg) { result: Result<NativeSecureEncryptAuthResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
      run {
        val channel = BasicMessageChannel<Any?>(binaryMessenger, "dev.flutter.pigeon.flutter_feature_biometric_android.FlutterFeatureBiometricApi.secureDecryptAuthenticate$separatedMessageChannelSuffix", codec)
        if (api != null) {
          channel.setMessageHandler { message, reply ->
            val args = message as List<Any?>
            val aliasArg = args[0] as String
            val encodedIVKeyArg = args[1] as String
            val requestForDecryptArg = args[2] as Map<String, String>
            val titleArg = args[3] as String
            val descriptionArg = args[4] as String
            val negativeTextArg = args[5] as String
            api.secureDecryptAuthenticate(aliasArg, encodedIVKeyArg, requestForDecryptArg, titleArg, descriptionArg, negativeTextArg) { result: Result<NativeSecureDecryptAuthResult> ->
              val error = result.exceptionOrNull()
              if (error != null) {
                reply.reply(wrapError(error))
              } else {
                val data = result.getOrNull()
                reply.reply(wrapResult(data))
              }
            }
          }
        } else {
          channel.setMessageHandler(null)
        }
      }
    }
  }
}
