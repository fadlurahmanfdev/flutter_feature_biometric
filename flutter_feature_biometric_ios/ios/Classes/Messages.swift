// Copyright 2013 The Flutter Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.
// Autogenerated from Pigeon (v22.5.0), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation

#if os(iOS)
  import Flutter
#elseif os(macOS)
  import FlutterMacOS
#else
  #error("Unsupported platform.")
#endif

/// Error class for passing custom error details to Dart side.
final class PigeonError: Error {
  let code: String
  let message: String?
  let details: Any?

  init(code: String, message: String?, details: Any?) {
    self.code = code
    self.message = message
    self.details = details
  }

  var localizedDescription: String {
    return
      "PigeonError(code: \(code), message: \(message ?? "<nil>"), details: \(details ?? "<nil>")"
      }
}

private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let pigeonError = error as? PigeonError {
    return [
      pigeonError.code,
      pigeonError.message,
      pigeonError.details,
    ]
  }
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details,
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)",
  ]
}

private func isNullish(_ value: Any?) -> Bool {
  return value is NSNull || value == nil
}

private func nilOrValue<T>(_ value: Any?) -> T? {
  if value is NSNull { return nil }
  return value as! T?
}

enum IOSLAPolicy: Int {
  case biometric = 0
  case deviceCredential = 1
}

enum IOSAuthenticationResultStatus: Int {
  case success = 0
  case biometricChanged = 1
  case canceled = 2
}

/// Generated class from Pigeon that represents data sent in messages.
struct IOSAuthenticationResult {
  var status: IOSAuthenticationResultStatus
  var encodedDomainState: String? = nil



  // swift-format-ignore: AlwaysUseLowerCamelCase
  static func fromList(_ pigeonVar_list: [Any?]) -> IOSAuthenticationResult? {
    let status = pigeonVar_list[0] as! IOSAuthenticationResultStatus
    let encodedDomainState: String? = nilOrValue(pigeonVar_list[1])

    return IOSAuthenticationResult(
      status: status,
      encodedDomainState: encodedDomainState
    )
  }
  func toList() -> [Any?] {
    return [
      status,
      encodedDomainState,
    ]
  }
}

private class MessagesPigeonCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
    case 129:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return IOSLAPolicy(rawValue: enumResultAsInt)
      }
      return nil
    case 130:
      let enumResultAsInt: Int? = nilOrValue(self.readValue() as! Int?)
      if let enumResultAsInt = enumResultAsInt {
        return IOSAuthenticationResultStatus(rawValue: enumResultAsInt)
      }
      return nil
    case 131:
      return IOSAuthenticationResult.fromList(self.readValue() as! [Any?])
    default:
      return super.readValue(ofType: type)
    }
  }
}

private class MessagesPigeonCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? IOSLAPolicy {
      super.writeByte(129)
      super.writeValue(value.rawValue)
    } else if let value = value as? IOSAuthenticationResultStatus {
      super.writeByte(130)
      super.writeValue(value.rawValue)
    } else if let value = value as? IOSAuthenticationResult {
      super.writeByte(131)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class MessagesPigeonCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return MessagesPigeonCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return MessagesPigeonCodecWriter(data: data)
  }
}

class MessagesPigeonCodec: FlutterStandardMessageCodec, @unchecked Sendable {
  static let shared = MessagesPigeonCodec(readerWriter: MessagesPigeonCodecReaderWriter())
}


/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol FlutterFeatureBiometricApi {
  func isDeviceSupportBiometric() throws -> Bool
  func canAuthenticate(laPolicy: IOSLAPolicy) throws -> Bool
  func authenticate(laPolicy: IOSLAPolicy, description: String, completion: @escaping (Result<IOSAuthenticationResult, Error>) -> Void)
  func isBiometricChanged(alias: String, encodedDomainState: String) throws -> Bool
  func authenticateSecureEncrypt(laPolicy: IOSLAPolicy, alias: String, description: String, completion: @escaping (Result<IOSAuthenticationResult, Error>) -> Void)
  func authenticateSecureDecrypt(laPolicy: IOSLAPolicy, encodedDomainState: String, alias: String, description: String, completion: @escaping (Result<IOSAuthenticationResult, Error>) -> Void)
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class FlutterFeatureBiometricApiSetup {
  static var codec: FlutterStandardMessageCodec { MessagesPigeonCodec.shared }
  /// Sets up an instance of `FlutterFeatureBiometricApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: FlutterFeatureBiometricApi?, messageChannelSuffix: String = "") {
    let channelSuffix = messageChannelSuffix.count > 0 ? ".\(messageChannelSuffix)" : ""
    let isDeviceSupportBiometricChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_feature_biometric_ios.FlutterFeatureBiometricApi.isDeviceSupportBiometric\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isDeviceSupportBiometricChannel.setMessageHandler { _, reply in
        do {
          let result = try api.isDeviceSupportBiometric()
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isDeviceSupportBiometricChannel.setMessageHandler(nil)
    }
    let canAuthenticateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_feature_biometric_ios.FlutterFeatureBiometricApi.canAuthenticate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      canAuthenticateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let laPolicyArg = args[0] as! IOSLAPolicy
        do {
          let result = try api.canAuthenticate(laPolicy: laPolicyArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      canAuthenticateChannel.setMessageHandler(nil)
    }
    let authenticateChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_feature_biometric_ios.FlutterFeatureBiometricApi.authenticate\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let laPolicyArg = args[0] as! IOSLAPolicy
        let descriptionArg = args[1] as! String
        api.authenticate(laPolicy: laPolicyArg, description: descriptionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateChannel.setMessageHandler(nil)
    }
    let isBiometricChangedChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_feature_biometric_ios.FlutterFeatureBiometricApi.isBiometricChanged\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      isBiometricChangedChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let aliasArg = args[0] as! String
        let encodedDomainStateArg = args[1] as! String
        do {
          let result = try api.isBiometricChanged(alias: aliasArg, encodedDomainState: encodedDomainStateArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      isBiometricChangedChannel.setMessageHandler(nil)
    }
    let authenticateSecureEncryptChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_feature_biometric_ios.FlutterFeatureBiometricApi.authenticateSecureEncrypt\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateSecureEncryptChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let laPolicyArg = args[0] as! IOSLAPolicy
        let aliasArg = args[1] as! String
        let descriptionArg = args[2] as! String
        api.authenticateSecureEncrypt(laPolicy: laPolicyArg, alias: aliasArg, description: descriptionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateSecureEncryptChannel.setMessageHandler(nil)
    }
    let authenticateSecureDecryptChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.flutter_feature_biometric_ios.FlutterFeatureBiometricApi.authenticateSecureDecrypt\(channelSuffix)", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      authenticateSecureDecryptChannel.setMessageHandler { message, reply in
        let args = message as! [Any?]
        let laPolicyArg = args[0] as! IOSLAPolicy
        let encodedDomainStateArg = args[1] as! String
        let aliasArg = args[2] as! String
        let descriptionArg = args[3] as! String
        api.authenticateSecureDecrypt(laPolicy: laPolicyArg, encodedDomainState: encodedDomainStateArg, alias: aliasArg, description: descriptionArg) { result in
          switch result {
          case .success(let res):
            reply(wrapResult(res))
          case .failure(let error):
            reply(wrapError(error))
          }
        }
      }
    } else {
      authenticateSecureDecryptChannel.setMessageHandler(nil)
    }
  }
}
